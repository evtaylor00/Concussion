import pandas as pd
import pycaret as py
import sklearn as sk
import numpy as np
import pycaret.regression as pycr
from pycaret.classification import *
clf1 = ClassificationExperiment()

########importing data#######
conc_data=pd.read_csv("/ContexData.csv") #read in data
conc_data['sex']=conc_data['sex'].astype("category")
conc_data['race']=conc_data['race'].astype("category")
conc_data['ethnicity']=conc_data['ethnicity'].astype("category")
conc_data['psych_disorder']=conc_data['psych_disorder'].astype("category")
conc_data['learning_disability']=conc_data['learning_disability'].astype("category")
conc_data['hx_migraine']=conc_data['hx_migraine'].astype("category")
conc_data['conc_within_12_months']=conc_data['conc_within_12_months'].astype("category")
conc_data['rtp_post_inj']=conc_data['rtp_post_inj'].astype("category")
conc_data['ed_hospitalization']=conc_data['ed_hospitalization'].astype("category")
conc_data['headache_post_inj']=conc_data['headache_post_inj'].astype("category")
conc_data['rtp']=conc_data['rtp'].astype("category")
conc_data['sport_played_injured_cat']=conc_data['sport_played_injured_cat'].astype("category")
conc_data['record_id']=conc_data['record_id'].astype("category")

########train-test split#########
conc_train, conc_test = sk.model_selection.train_test_split(conc_data, test_size=0.2, random_state=20) #subset into train and test

#########imputation for training set#########
imputer = sk.impute.IterativeImputer()
imputer.fit(conc_train)
conc_train_imp=imputer.transform(conc_train)
conc_train = pd.DataFrame(conc_train_imp, columns = conc_train.columns)

conc_train.loc[conc_train['rtp_post_inj']<=0.5,'rtp_post_inj']=0
conc_train.loc[conc_train['rtp_post_inj']>0.5,'rtp_post_inj']=1
conc_train.loc[conc_train['hx_migraine']<=0.5,'hx_migraine']=0
conc_train.loc[conc_train['hx_migraine']>0.5,'hx_migraine']=1
conc_train.loc[conc_train['conc_within_12_months']<=0.5,'conc_within_12_months']=0
conc_train.loc[conc_train['conc_within_12_months']>0.5,'conc_within_12_months']=1
conc_train.loc[conc_train['ed_hospitalization']<=0.5,'ed_hospitalization']=0
conc_train.loc[conc_train['ed_hospitalization']>0.5,'ed_hospitalization']=1
conc_train.loc[conc_train['headache_post_inj']<=0.5,'headache_post_inj']=0
conc_train.loc[conc_train['headache_post_inj']>0.5,'headache_post_inj']=1
conc_train.loc[conc_train['rtp']<=0.5,'rtp']=0
conc_train.loc[conc_train['rtp']>0.5,'rtp']=1

#######imputation for testing set###########
conc_test_x=conc_test.iloc[:, 2:]
conc_test_y=conc_test.iloc[:,0:2]
imputer = sk.impute.IterativeImputer()
imputer.fit(conc_test_x)
conc_test_imp_x=imputer.transform(conc_test_x)
conc_test_merge=np.column_stack((conc_test_y,conc_test_imp_x))
conc_test = pd.DataFrame(conc_test_merge, columns = conc_test.columns)

conc_test.loc[conc_test['rtp_post_inj']<=0.5,'rtp_post_inj']=0
conc_test.loc[conc_test['rtp_post_inj']>0.5,'rtp_post_inj']=1
conc_test.loc[conc_test['hx_migraine']<=0.5,'hx_migraine']=0
conc_test.loc[conc_test['hx_migraine']>0.5,'hx_migraine']=1
conc_test.loc[conc_test['conc_within_12_months']<=0.5,'conc_within_12_months']=0
conc_test.loc[conc_test['conc_within_12_months']>0.5,'conc_within_12_months']=1
conc_test.loc[conc_test['ed_hospitalization']<=0.5,'ed_hospitalization']=0
conc_test.loc[conc_test['ed_hospitalization']>0.5,'ed_hospitalization']=1
conc_test.loc[conc_test['headache_post_inj']<=0.5,'headache_post_inj']=0
conc_test.loc[conc_test['headache_post_inj']>0.5,'headache_post_inj']=1
conc_test.loc[conc_test['rtp']<=0.5,'rtp']=0
conc_test.loc[conc_test['rtp']>0.5,'rtp']=1

########running models########
#create binary split
conc_train.loc[conc_train['doi_clear_sx_medrec_edited']<=3,'Predict3']=0
conc_train.loc[conc_train['doi_clear_sx_medrec_edited']>3,'Predict3']=1

#setup data
conc_class_3 = clf1.setup(conc_train, target = 'Predict3', ignore_features=['Predict2','Predict1','complete_rtp_recoded','doi_clear_sx_medrec_edited','doi_clear_sx_medrec_cat','record_id','psych_disorder_type___1','psych_disorder_type___2','psych_disorder_type___3','psych_disorder_type___4','psych_disorder_type___5','psych_disorder_type___6','learning_disability_type___1','learning_disability_type___2','learning_disability_type___3','learning_disability_type___4','doi_clear_sx_medrec_2','sport_played_injured'],session_id=6085,index=False, test_data=None)

#find top models
conc_best_class = conc_class_3.compare_models() #compare ML models

#catboost
conc_cat_3 = clf1.create_model('catboost',fold=5)
conc_tuned_cat_3 = clf1.tune_model(conc_cat_3,fold=5,optimize='AUC')
plot_varimp_1=clf1.plot_model(conc_tuned_cat_3, plot='feature')
clf1.predict_model(conc_tuned_cat_3)
final_conc_cat_3 = clf1.finalize_model(conc_tuned_cat_3)
conc_pred_3 = clf1.predict_model(final_conc_cat_3, data=conc_test)
clf1.interpret_model(conc_cat_3, plot='pfi',scale=3,save=True)

#extra trees
conc_et_3 = clf1.create_model('et',fold=5)
conc_tuned_et_3 = clf1.tune_model(conc_et_3,fold=5,optimize='AUC')
clf1.plot_model(conc_tuned_et_3, plot='feature')
clf1.predict_model(conc_tuned_et_3)
final_conc_et_3 = clf1.finalize_model(conc_tuned_et_3)
conc_pred_3_et = clf1.predict_model(final_conc_et_3, data=conc_test)

#random forest
conc_rf_3 = clf1.create_model('rf',fold=5)
conc_tuned_rf_3 = clf1.tune_model(conc_rf_3,fold=5,optimize='AUC')
clf1.plot_model(conc_tuned_rf_3, plot='feature')
clf1.predict_model(conc_tuned_rf_3)
final_conc_rf_3 = clf1.finalize_model(conc_tuned_rf_3)
conc_pred_3_rf = clf1.predict_model(final_conc_rf_3, data=conc_test)
