import pandas as pd
import pycaret as py
import sklearn as sk
import numpy as np
import pycaret.regression as pycr
from pycaret.classification import *
clf1 = ClassificationExperiment()

########importing data#######
conc_data=pd.read_csv("/ContexData_TimeToClinicLessThan2Weeks.csv") #read in data

########train-test split#########
conc_train, conc_test = sk.model_selection.train_test_split(conc_data, test_size=0.2, random_state=5) #subset into train and test

#########imputation for training set#########
imputer = sk.impute.IterativeImputer()
imputer.fit(conc_train)
conc_train_imp=imputer.transform(conc_train)
conc_train = pd.DataFrame(conc_train_imp, columns = conc_train.columns)

conc_train.loc[conc_train['rtp_post_inj']<=0.5,'rtp_post_inj']=0
conc_train.loc[conc_train['rtp_post_inj']>0.5,'rtp_post_inj']=1
conc_train.loc[conc_train['hx_migraine']<=0.5,'hx_migraine']=0
conc_train.loc[conc_train['hx_migraine']>0.5,'hx_migraine']=1
conc_train.loc[conc_train['conc_within_12_months']<=0.5,'conc_within_12_months']=0
conc_train.loc[conc_train['conc_within_12_months']>0.5,'conc_within_12_months']=1
conc_train.loc[conc_train['ed_hospitalization']<=0.5,'ed_hospitalization']=0
conc_train.loc[conc_train['ed_hospitalization']>0.5,'ed_hospitalization']=1
conc_train.loc[conc_train['headache_post_inj']<=0.5,'headache_post_inj']=0
conc_train.loc[conc_train['headache_post_inj']>0.5,'headache_post_inj']=1
conc_train.loc[conc_train['rtp']<=0.5,'rtp']=0
conc_train.loc[conc_train['rtp'].between(0.5,1,inclusive='right'),'rtp']=1
conc_train.loc[conc_train['rtp']>1,'rtp']=2
conc_train.loc[conc_train['sx_worsen_phys']<=0.5,'sx_worsen_phys']=0
conc_train.loc[conc_train['sx_worsen_cog']<=0.5,'sx_worsen_cog']=0
conc_train.loc[conc_train['sx_worsen_cog'].between(0.5,1,inclusive='right'),'sx_worsen_cog']=1
conc_train.loc[conc_train['sx_worsen_cog']>1,'sx_worsen_cog']=2
conc_train.loc[conc_train['sx_worsen_phys']<=0.5,'sx_worsen_phys']=0
conc_train.loc[conc_train['sx_worsen_phys'].between(0.5,1,inclusive='right'),'sx_worsen_phys']=1
conc_train.loc[conc_train['sx_worsen_phys']>1,'sx_worsen_phys']=2


conc_train['sx_worsen_cog']=conc_train['sx_worsen_cog'].astype("category")
conc_train['sx_worsen_phys']=conc_train['sx_worsen_phys'].astype("category")
conc_train['rtp']=conc_train['rtp'].astype("category")
conc_train['race']=conc_train['race'].astype("category")
conc_train['ethnicity']=conc_data['ethnicity'].astype("category")
conc_train['sport_played_injured_cat']=conc_train['sport_played_injured_cat'].astype("category")

#######imputation for testing set##########
conc_test_x=conc_test.iloc[:, 2:]
conc_test_y=conc_test.iloc[:,0:2]
imputer = sk.impute.IterativeImputer()
imputer.fit(conc_test_x)
conc_test_imp_x=imputer.transform(conc_test_x)
conc_test_merge=np.column_stack((conc_test_y,conc_test_imp_x))
conc_test = pd.DataFrame(conc_test_merge, columns = conc_test.columns)

conc_test.loc[conc_test['rtp_post_inj']<=0.5,'rtp_post_inj']=0
conc_test.loc[conc_test['rtp_post_inj']>0.5,'rtp_post_inj']=1
conc_test.loc[conc_test['hx_migraine']<=0.5,'hx_migraine']=0
conc_test.loc[conc_test['hx_migraine']>0.5,'hx_migraine']=1
conc_test.loc[conc_test['conc_within_12_months']<=0.5,'conc_within_12_months']=0
conc_test.loc[conc_test['conc_within_12_months']>0.5,'conc_within_12_months']=1
conc_test.loc[conc_test['ed_hospitalization']<=0.5,'ed_hospitalization']=0
conc_test.loc[conc_test['ed_hospitalization']>0.5,'ed_hospitalization']=1
conc_test.loc[conc_test['headache_post_inj']<=0.5,'headache_post_inj']=0
conc_test.loc[conc_test['headache_post_inj']>0.5,'headache_post_inj']=1
conc_test.loc[conc_test['rtp']<=0.5,'rtp']=0
conc_test.loc[conc_test['rtp'].between(0.5,1,inclusive='right'),'rtp']=1
conc_test.loc[conc_test['rtp']>1,'rtp']=2
conc_test.loc[conc_test['sx_worsen_cog']<=0.5,'sx_worsen_cog']=0
conc_test.loc[conc_test['sx_worsen_cog'].between(0.5,1,inclusive='right'),'sx_worsen_cog']=1
conc_test.loc[conc_test['sx_worsen_cog']>1,'sx_worsen_cog']=2
conc_test.loc[conc_test['sx_worsen_phys']<=0.5,'sx_worsen_phys']=0
conc_test.loc[conc_test['sx_worsen_phys'].between(0.5,1,inclusive='right'),'sx_worsen_phys']=1
conc_test.loc[conc_test['sx_worsen_phys']>1,'sx_worsen_phys']=2

conc_test['sx_worsen_cog']=conc_test['sx_worsen_cog'].astype("category")
conc_test['sx_worsen_phys']=conc_test['sx_worsen_phys'].astype("category")
conc_test['rtp']=conc_test['rtp'].astype("category")
conc_test['race']=conc_test['race'].astype("category")
conc_test['ethnicity']=conc_data['ethnicity'].astype("category")
conc_test['sport_played_injured_cat']=conc_test['sport_played_injured_cat'].astype("category")

#########correlation calculations###################
correlation=pd.DataFrame(conc_data.corr())
correlation.to_csv()

#######multiclass classification models#############
#setup
conc_class = clf1.setup(conc_train, target = 'doi_clear_sx_medrec_edited', ignore_features=['complete_rtp_recoded','record_id','doi_clear_sx_medrec_2','sport_played_injured'],session_id=100,index=False, test_data=None)
conc_best_class=conc_class.compare_models() #compare ML models

#catboost
conc_cat = clf1.create_model('catboost')
conc_tuned_cat = clf1.tune_model(conc_cat)
clf1.plot_model(conc_tuned_cat, plot='feature')
clf1.predict_model(conc_tuned_cat)
final_cat = clf1.finalize_model(conc_tuned_cat)
final_cat_predictions = clf1.predict_model(final_cat, data=conc_test)

#random forest
conc_rf = clf1.create_model('rf')
conc_tuned_rf = clf1.tune_model(conc_rf)
clf1.plot_model(conc_tuned_rf, plot='feature')
clf1.predict_model(conc_tuned_rf)
final_conc_rf = clf1.finalize_model(conc_tuned_rf)
conc_pred_rf = clf1.predict_model(final_conc_rf, data=conc_test)

#xgboost
conc_xg = clf1.create_model('xgboost')
conc_tuned_xg = clf1.tune_model(conc_xg)
clf1.plot_model(conc_tuned_xg, plot='feature')
clf1.predict_model(conc_tuned_xg)
final_conc_xg = clf1.finalize_model(conc_tuned_xg)
conc_pred_xg = clf1.predict_model(final_conc_xg, data=conc_test)

#confusion matrix
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns
actual    = conc_test.doi_clear_sx_medrec_edited
predicted = conc_pred_rf.prediction_label
cm = confusion_matrix(actual,predicted)

plt.figure(figsize=(8, 6))
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, cmap='Blues', xticklabels=[
            '0-3 days', '3-7 days','7-14 days', '14 days-1 month', '1-3 months','>3 months'], yticklabels=['0-3 days', '3-7 days','7-14 days', '14 days-1 month', '1-3 months','>3 months'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

#feature importance
clf1.plot_model(conc_tuned_cat, plot='feature_all')


########binary classification models########
#create binary split
conc_train.loc[conc_train['doi_clear_sx_medrec_edited']<=3,'Predict3']=0
conc_train.loc[conc_train['doi_clear_sx_medrec_edited']>3,'Predict3']=1

#setup data
conc_class_3 = clf1.setup(conc_train, target = 'Predict3', ignore_features=['complete_rtp_recoded','Predict2','Predict1','doi_clear_sx_medrec_edited','doi_clear_sx_medrec_cat','record_id','doi_clear_sx_medrec_2','sport_played_injured'], index=False, test_data=None,session_id=200)

#find top models
conc_best_class = conc_class_3.compare_models() #compare ML models

#catboost
conc_cat_3 = clf1.create_model('catboost',fold=5)
conc_tuned_cat_3 = clf1.tune_model(conc_cat_3,fold=5,optimize='AUC')
plot_varimp_1=clf1.plot_model(conc_tuned_cat_3, plot='feature')
clf1.predict_model(conc_tuned_cat_3)
final_conc_cat_3 = clf1.finalize_model(conc_tuned_cat_3)
conc_pred_3 = clf1.predict_model(final_conc_cat_3, data=conc_test)
clf1.interpret_model(conc_cat_3, plot='pfi',scale=3,save=True)

#gradient boost
conc_gb_3 = clf1.create_model('gbc',fold=5)
conc_tuned_gb_3 = clf1.tune_model(conc_gb_3,fold=5,optimize='AUC')
clf1.plot_model(conc_tuned_gb_3, plot='feature')
clf1.predict_model(conc_tuned_gb_3)
final_conc_gb_3 = clf1.finalize_model(conc_tuned_gb_3)
conc_pred_3_gb = clf1.predict_model(final_conc_gb_3, data=conc_test)

#AdaBoost
conc_ada_3 = clf1.create_model('ada',fold=5)
conc_tuned_ada_3 = clf1.tune_model(conc_ada_3,fold=5,optimize='AUC')
clf1.plot_model(conc_tuned_ada_3, plot='feature')
clf1.predict_model(conc_tuned_ada_3)
final_conc_ada_3 = clf1.finalize_model(conc_tuned_ada_3)
conc_pred_3_ada = clf1.predict_model(final_conc_ada_3, data=conc_test)

#XGBoost
conc_xg_3 = clf1.create_model('xgboost',fold=5)
conc_tuned_xg_3 = clf1.tune_model(conc_xg_3,fold=5,optimize='AUC')
clf1.plot_model(conc_tuned_xg_3, plot='feature')
clf1.predict_model(conc_tuned_xg_3)
final_conc_xg_3 = clf1.finalize_model(conc_tuned_xg_3)
conc_pred_3_xg = clf1.predict_model(final_conc_xg_3, data=conc_test)

#logistic
conc_lr_3 = clf1.create_model('lr',fold=5)
conc_tuned_lr_3 = clf1.tune_model(conc_lr_3,fold=5,optimize='AUC')
clf1.plot_model(conc_tuned_lr_3, plot='feature')
clf1.predict_model(conc_tuned_lr_3)
final_conc_lr_3 = clf1.finalize_model(conc_tuned_lr_3)
conc_pred_3_lr = clf1.predict_model(final_conc_lr_3, data=conc_test)

#confusion matrix
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns
actual    = conc_test.Predict3
predicted = conc_pred_3.prediction_label
cm = confusion_matrix(actual,predicted)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, cmap='Blues', 
            xticklabels=['<=14 days recovery', '>14 days recovery'], 
            yticklabels=['<=14 days recovery', '>14 days recovery'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

#feature importance for catboost
clf1.plot_model(conc_tuned_cat_3, plot='feature_all')
clf1.interpret_model(conc_tuned_cat_3, plot='pfi',scale=3,save=True)
